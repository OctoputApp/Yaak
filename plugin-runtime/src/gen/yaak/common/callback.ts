// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: yaak/common/callback.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Struct } from "../../google/protobuf/struct";

export const protobufPackage = "yaak.common";

export interface Callback {
  id: string;
}

export interface CallbackInvocation {
  callback: Callback | undefined;
  args: { [key: string]: any } | undefined;
}

function createBaseCallback(): Callback {
  return { id: "" };
}

export const Callback = {
  encode(message: Callback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Callback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Callback {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: Callback): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<Callback>): Callback {
    return Callback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Callback>): Callback {
    const message = createBaseCallback();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCallbackInvocation(): CallbackInvocation {
  return { callback: undefined, args: undefined };
}

export const CallbackInvocation = {
  encode(message: CallbackInvocation, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.callback !== undefined) {
      Callback.encode(message.callback, writer.uint32(10).fork()).ldelim();
    }
    if (message.args !== undefined) {
      Struct.encode(Struct.wrap(message.args), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallbackInvocation {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallbackInvocation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.callback = Callback.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.args = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallbackInvocation {
    return {
      callback: isSet(object.callback) ? Callback.fromJSON(object.callback) : undefined,
      args: isObject(object.args) ? object.args : undefined,
    };
  },

  toJSON(message: CallbackInvocation): unknown {
    const obj: any = {};
    if (message.callback !== undefined) {
      obj.callback = Callback.toJSON(message.callback);
    }
    if (message.args !== undefined) {
      obj.args = message.args;
    }
    return obj;
  },

  create(base?: DeepPartial<CallbackInvocation>): CallbackInvocation {
    return CallbackInvocation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallbackInvocation>): CallbackInvocation {
    const message = createBaseCallbackInvocation();
    message.callback = (object.callback !== undefined && object.callback !== null)
      ? Callback.fromPartial(object.callback)
      : undefined;
    message.args = object.args ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
