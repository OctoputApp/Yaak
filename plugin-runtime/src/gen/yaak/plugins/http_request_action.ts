// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: yaak/plugins/http_request_action.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Callback, CallbackInvocation } from "../common/callback";

export const protobufPackage = "yaak.plugins";

export interface HttpRequestAction {
  key: string;
  label: string;
  onSelect: Callback | undefined;
}

export interface GetHttpRequestActionsRequest {
}

export interface GetHttpRequestActionsResponse {
  httpRequestActions: HttpRequestAction[];
}

export interface CallHttpRequestActionRequest {
  invocation: CallbackInvocation | undefined;
}

export interface CallHttpRequestActionResponse {
}

function createBaseHttpRequestAction(): HttpRequestAction {
  return { key: "", label: "", onSelect: undefined };
}

export const HttpRequestAction = {
  encode(message: HttpRequestAction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.onSelect !== undefined) {
      Callback.encode(message.onSelect, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HttpRequestAction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHttpRequestAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.onSelect = Callback.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HttpRequestAction {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      onSelect: isSet(object.onSelect) ? Callback.fromJSON(object.onSelect) : undefined,
    };
  },

  toJSON(message: HttpRequestAction): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.onSelect !== undefined) {
      obj.onSelect = Callback.toJSON(message.onSelect);
    }
    return obj;
  },

  create(base?: DeepPartial<HttpRequestAction>): HttpRequestAction {
    return HttpRequestAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HttpRequestAction>): HttpRequestAction {
    const message = createBaseHttpRequestAction();
    message.key = object.key ?? "";
    message.label = object.label ?? "";
    message.onSelect = (object.onSelect !== undefined && object.onSelect !== null)
      ? Callback.fromPartial(object.onSelect)
      : undefined;
    return message;
  },
};

function createBaseGetHttpRequestActionsRequest(): GetHttpRequestActionsRequest {
  return {};
}

export const GetHttpRequestActionsRequest = {
  encode(_: GetHttpRequestActionsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHttpRequestActionsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHttpRequestActionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetHttpRequestActionsRequest {
    return {};
  },

  toJSON(_: GetHttpRequestActionsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetHttpRequestActionsRequest>): GetHttpRequestActionsRequest {
    return GetHttpRequestActionsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetHttpRequestActionsRequest>): GetHttpRequestActionsRequest {
    const message = createBaseGetHttpRequestActionsRequest();
    return message;
  },
};

function createBaseGetHttpRequestActionsResponse(): GetHttpRequestActionsResponse {
  return { httpRequestActions: [] };
}

export const GetHttpRequestActionsResponse = {
  encode(message: GetHttpRequestActionsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.httpRequestActions) {
      HttpRequestAction.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetHttpRequestActionsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetHttpRequestActionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.httpRequestActions.push(HttpRequestAction.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetHttpRequestActionsResponse {
    return {
      httpRequestActions: globalThis.Array.isArray(object?.httpRequestActions)
        ? object.httpRequestActions.map((e: any) => HttpRequestAction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetHttpRequestActionsResponse): unknown {
    const obj: any = {};
    if (message.httpRequestActions?.length) {
      obj.httpRequestActions = message.httpRequestActions.map((e) => HttpRequestAction.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetHttpRequestActionsResponse>): GetHttpRequestActionsResponse {
    return GetHttpRequestActionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetHttpRequestActionsResponse>): GetHttpRequestActionsResponse {
    const message = createBaseGetHttpRequestActionsResponse();
    message.httpRequestActions = object.httpRequestActions?.map((e) => HttpRequestAction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCallHttpRequestActionRequest(): CallHttpRequestActionRequest {
  return { invocation: undefined };
}

export const CallHttpRequestActionRequest = {
  encode(message: CallHttpRequestActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.invocation !== undefined) {
      CallbackInvocation.encode(message.invocation, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallHttpRequestActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallHttpRequestActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invocation = CallbackInvocation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallHttpRequestActionRequest {
    return { invocation: isSet(object.invocation) ? CallbackInvocation.fromJSON(object.invocation) : undefined };
  },

  toJSON(message: CallHttpRequestActionRequest): unknown {
    const obj: any = {};
    if (message.invocation !== undefined) {
      obj.invocation = CallbackInvocation.toJSON(message.invocation);
    }
    return obj;
  },

  create(base?: DeepPartial<CallHttpRequestActionRequest>): CallHttpRequestActionRequest {
    return CallHttpRequestActionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallHttpRequestActionRequest>): CallHttpRequestActionRequest {
    const message = createBaseCallHttpRequestActionRequest();
    message.invocation = (object.invocation !== undefined && object.invocation !== null)
      ? CallbackInvocation.fromPartial(object.invocation)
      : undefined;
    return message;
  },
};

function createBaseCallHttpRequestActionResponse(): CallHttpRequestActionResponse {
  return {};
}

export const CallHttpRequestActionResponse = {
  encode(_: CallHttpRequestActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallHttpRequestActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallHttpRequestActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CallHttpRequestActionResponse {
    return {};
  },

  toJSON(_: CallHttpRequestActionResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<CallHttpRequestActionResponse>): CallHttpRequestActionResponse {
    return CallHttpRequestActionResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<CallHttpRequestActionResponse>): CallHttpRequestActionResponse {
    const message = createBaseCallHttpRequestActionResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
