// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: yaak/plugins/data_filterer.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Callback, CallbackInvocation } from "../common/callback";

export const protobufPackage = "yaak.plugins";

export interface GetDataFilterersRequest {
  mimeType: string;
}

export interface DataFilterer {
  name: string;
  description: string;
  onFilter: Callback | undefined;
}

export interface GetDataFilterersResponse {
  dataFilterers: DataFilterer[];
}

export interface CallDataFiltererRequest {
  invocation: CallbackInvocation | undefined;
}

export interface FilterDataKeys {
  jsonKeys: string[];
}

export interface CallDataFiltererResponse {
  maybeKeys: FilterDataKeys | undefined;
}

function createBaseGetDataFilterersRequest(): GetDataFilterersRequest {
  return { mimeType: "" };
}

export const GetDataFilterersRequest = {
  encode(message: GetDataFilterersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.mimeType !== "") {
      writer.uint32(26).string(message.mimeType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDataFilterersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataFilterersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.mimeType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataFilterersRequest {
    return { mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "" };
  },

  toJSON(message: GetDataFilterersRequest): unknown {
    const obj: any = {};
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataFilterersRequest>): GetDataFilterersRequest {
    return GetDataFilterersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataFilterersRequest>): GetDataFilterersRequest {
    const message = createBaseGetDataFilterersRequest();
    message.mimeType = object.mimeType ?? "";
    return message;
  },
};

function createBaseDataFilterer(): DataFilterer {
  return { name: "", description: "", onFilter: undefined };
}

export const DataFilterer = {
  encode(message: DataFilterer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.onFilter !== undefined) {
      Callback.encode(message.onFilter, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DataFilterer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataFilterer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.onFilter = Callback.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataFilterer {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      onFilter: isSet(object.onFilter) ? Callback.fromJSON(object.onFilter) : undefined,
    };
  },

  toJSON(message: DataFilterer): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.onFilter !== undefined) {
      obj.onFilter = Callback.toJSON(message.onFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<DataFilterer>): DataFilterer {
    return DataFilterer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataFilterer>): DataFilterer {
    const message = createBaseDataFilterer();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.onFilter = (object.onFilter !== undefined && object.onFilter !== null)
      ? Callback.fromPartial(object.onFilter)
      : undefined;
    return message;
  },
};

function createBaseGetDataFilterersResponse(): GetDataFilterersResponse {
  return { dataFilterers: [] };
}

export const GetDataFilterersResponse = {
  encode(message: GetDataFilterersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.dataFilterers) {
      DataFilterer.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetDataFilterersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDataFilterersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dataFilterers.push(DataFilterer.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDataFilterersResponse {
    return {
      dataFilterers: globalThis.Array.isArray(object?.dataFilterers)
        ? object.dataFilterers.map((e: any) => DataFilterer.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetDataFilterersResponse): unknown {
    const obj: any = {};
    if (message.dataFilterers?.length) {
      obj.dataFilterers = message.dataFilterers.map((e) => DataFilterer.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetDataFilterersResponse>): GetDataFilterersResponse {
    return GetDataFilterersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDataFilterersResponse>): GetDataFilterersResponse {
    const message = createBaseGetDataFilterersResponse();
    message.dataFilterers = object.dataFilterers?.map((e) => DataFilterer.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCallDataFiltererRequest(): CallDataFiltererRequest {
  return { invocation: undefined };
}

export const CallDataFiltererRequest = {
  encode(message: CallDataFiltererRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.invocation !== undefined) {
      CallbackInvocation.encode(message.invocation, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallDataFiltererRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallDataFiltererRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.invocation = CallbackInvocation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallDataFiltererRequest {
    return { invocation: isSet(object.invocation) ? CallbackInvocation.fromJSON(object.invocation) : undefined };
  },

  toJSON(message: CallDataFiltererRequest): unknown {
    const obj: any = {};
    if (message.invocation !== undefined) {
      obj.invocation = CallbackInvocation.toJSON(message.invocation);
    }
    return obj;
  },

  create(base?: DeepPartial<CallDataFiltererRequest>): CallDataFiltererRequest {
    return CallDataFiltererRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallDataFiltererRequest>): CallDataFiltererRequest {
    const message = createBaseCallDataFiltererRequest();
    message.invocation = (object.invocation !== undefined && object.invocation !== null)
      ? CallbackInvocation.fromPartial(object.invocation)
      : undefined;
    return message;
  },
};

function createBaseFilterDataKeys(): FilterDataKeys {
  return { jsonKeys: [] };
}

export const FilterDataKeys = {
  encode(message: FilterDataKeys, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.jsonKeys) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FilterDataKeys {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFilterDataKeys();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.jsonKeys.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FilterDataKeys {
    return {
      jsonKeys: globalThis.Array.isArray(object?.jsonKeys) ? object.jsonKeys.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: FilterDataKeys): unknown {
    const obj: any = {};
    if (message.jsonKeys?.length) {
      obj.jsonKeys = message.jsonKeys;
    }
    return obj;
  },

  create(base?: DeepPartial<FilterDataKeys>): FilterDataKeys {
    return FilterDataKeys.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FilterDataKeys>): FilterDataKeys {
    const message = createBaseFilterDataKeys();
    message.jsonKeys = object.jsonKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseCallDataFiltererResponse(): CallDataFiltererResponse {
  return { maybeKeys: undefined };
}

export const CallDataFiltererResponse = {
  encode(message: CallDataFiltererResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.maybeKeys !== undefined) {
      FilterDataKeys.encode(message.maybeKeys, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallDataFiltererResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallDataFiltererResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.maybeKeys = FilterDataKeys.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallDataFiltererResponse {
    return { maybeKeys: isSet(object.maybeKeys) ? FilterDataKeys.fromJSON(object.maybeKeys) : undefined };
  },

  toJSON(message: CallDataFiltererResponse): unknown {
    const obj: any = {};
    if (message.maybeKeys !== undefined) {
      obj.maybeKeys = FilterDataKeys.toJSON(message.maybeKeys);
    }
    return obj;
  },

  create(base?: DeepPartial<CallDataFiltererResponse>): CallDataFiltererResponse {
    return CallDataFiltererResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallDataFiltererResponse>): CallDataFiltererResponse {
    const message = createBaseCallDataFiltererResponse();
    message.maybeKeys = (object.maybeKeys !== undefined && object.maybeKeys !== null)
      ? FilterDataKeys.fromPartial(object.maybeKeys)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
