// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: yaak/plugins/file_importer.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Struct } from "../../google/protobuf/struct";
import { Callback } from "../common/callback";

export const protobufPackage = "yaak.plugins";

export interface GetFileImportersRequest {
}

export interface FileImporter {
  name: string;
  description: string;
  onImport: Callback | undefined;
}

export interface GetFileImportersResponse {
  fileImporters: FileImporter[];
}

export interface CallFileImportRequest {
  fileContent: string;
}

export interface CallFileImportResponse {
  resources: { [key: string]: any } | undefined;
}

function createBaseGetFileImportersRequest(): GetFileImportersRequest {
  return {};
}

export const GetFileImportersRequest = {
  encode(_: GetFileImportersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFileImportersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFileImportersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetFileImportersRequest {
    return {};
  },

  toJSON(_: GetFileImportersRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetFileImportersRequest>): GetFileImportersRequest {
    return GetFileImportersRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetFileImportersRequest>): GetFileImportersRequest {
    const message = createBaseGetFileImportersRequest();
    return message;
  },
};

function createBaseFileImporter(): FileImporter {
  return { name: "", description: "", onImport: undefined };
}

export const FileImporter = {
  encode(message: FileImporter, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.onImport !== undefined) {
      Callback.encode(message.onImport, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FileImporter {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileImporter();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.onImport = Callback.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileImporter {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      onImport: isSet(object.onImport) ? Callback.fromJSON(object.onImport) : undefined,
    };
  },

  toJSON(message: FileImporter): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.onImport !== undefined) {
      obj.onImport = Callback.toJSON(message.onImport);
    }
    return obj;
  },

  create(base?: DeepPartial<FileImporter>): FileImporter {
    return FileImporter.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileImporter>): FileImporter {
    const message = createBaseFileImporter();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.onImport = (object.onImport !== undefined && object.onImport !== null)
      ? Callback.fromPartial(object.onImport)
      : undefined;
    return message;
  },
};

function createBaseGetFileImportersResponse(): GetFileImportersResponse {
  return { fileImporters: [] };
}

export const GetFileImportersResponse = {
  encode(message: GetFileImportersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.fileImporters) {
      FileImporter.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetFileImportersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFileImportersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fileImporters.push(FileImporter.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetFileImportersResponse {
    return {
      fileImporters: globalThis.Array.isArray(object?.fileImporters)
        ? object.fileImporters.map((e: any) => FileImporter.fromJSON(e))
        : [],
    };
  },

  toJSON(message: GetFileImportersResponse): unknown {
    const obj: any = {};
    if (message.fileImporters?.length) {
      obj.fileImporters = message.fileImporters.map((e) => FileImporter.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetFileImportersResponse>): GetFileImportersResponse {
    return GetFileImportersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetFileImportersResponse>): GetFileImportersResponse {
    const message = createBaseGetFileImportersResponse();
    message.fileImporters = object.fileImporters?.map((e) => FileImporter.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCallFileImportRequest(): CallFileImportRequest {
  return { fileContent: "" };
}

export const CallFileImportRequest = {
  encode(message: CallFileImportRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.fileContent !== "") {
      writer.uint32(10).string(message.fileContent);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallFileImportRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallFileImportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fileContent = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallFileImportRequest {
    return { fileContent: isSet(object.fileContent) ? globalThis.String(object.fileContent) : "" };
  },

  toJSON(message: CallFileImportRequest): unknown {
    const obj: any = {};
    if (message.fileContent !== "") {
      obj.fileContent = message.fileContent;
    }
    return obj;
  },

  create(base?: DeepPartial<CallFileImportRequest>): CallFileImportRequest {
    return CallFileImportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallFileImportRequest>): CallFileImportRequest {
    const message = createBaseCallFileImportRequest();
    message.fileContent = object.fileContent ?? "";
    return message;
  },
};

function createBaseCallFileImportResponse(): CallFileImportResponse {
  return { resources: undefined };
}

export const CallFileImportResponse = {
  encode(message: CallFileImportResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.resources !== undefined) {
      Struct.encode(Struct.wrap(message.resources), writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallFileImportResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallFileImportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resources = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallFileImportResponse {
    return { resources: isObject(object.resources) ? object.resources : undefined };
  },

  toJSON(message: CallFileImportResponse): unknown {
    const obj: any = {};
    if (message.resources !== undefined) {
      obj.resources = message.resources;
    }
    return obj;
  },

  create(base?: DeepPartial<CallFileImportResponse>): CallFileImportResponse {
    return CallFileImportResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallFileImportResponse>): CallFileImportResponse {
    const message = createBaseCallFileImportResponse();
    message.resources = object.resources ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
