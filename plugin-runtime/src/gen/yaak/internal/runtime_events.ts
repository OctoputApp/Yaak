// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: yaak/internal/runtime_events.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Struct } from "../../google/protobuf/struct";

export const protobufPackage = "yaak.plugins";

export interface RuntimeEventPluginExecution {
  resource: string;
  action: string;
  attributes: { [key: string]: { [key: string]: any } | undefined };
}

export interface RuntimeEventPluginExecution_AttributesEntry {
  key: string;
  value: { [key: string]: any } | undefined;
}

export interface RuntimeEventsRequest {
}

export interface RuntimeEventsResponse {
  pluginExecution?: RuntimeEventPluginExecution | undefined;
}

function createBaseRuntimeEventPluginExecution(): RuntimeEventPluginExecution {
  return { resource: "", action: "", attributes: {} };
}

export const RuntimeEventPluginExecution = {
  encode(message: RuntimeEventPluginExecution, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.resource !== "") {
      writer.uint32(10).string(message.resource);
    }
    if (message.action !== "") {
      writer.uint32(18).string(message.action);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      if (value !== undefined) {
        RuntimeEventPluginExecution_AttributesEntry.encode({ key: key as any, value }, writer.uint32(26).fork())
          .ldelim();
      }
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RuntimeEventPluginExecution {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeEventPluginExecution();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.resource = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.action = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          const entry3 = RuntimeEventPluginExecution_AttributesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.attributes[entry3.key] = entry3.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeEventPluginExecution {
    return {
      resource: isSet(object.resource) ? globalThis.String(object.resource) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: { [key: string]: any } | undefined }>(
          (acc, [key, value]) => {
            acc[key] = value as { [key: string]: any } | undefined;
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: RuntimeEventPluginExecution): unknown {
    const obj: any = {};
    if (message.resource !== "") {
      obj.resource = message.resource;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeEventPluginExecution>): RuntimeEventPluginExecution {
    return RuntimeEventPluginExecution.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeEventPluginExecution>): RuntimeEventPluginExecution {
    const message = createBaseRuntimeEventPluginExecution();
    message.resource = object.resource ?? "";
    message.action = object.action ?? "";
    message.attributes = Object.entries(object.attributes ?? {}).reduce<
      { [key: string]: { [key: string]: any } | undefined }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = value;
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseRuntimeEventPluginExecution_AttributesEntry(): RuntimeEventPluginExecution_AttributesEntry {
  return { key: "", value: undefined };
}

export const RuntimeEventPluginExecution_AttributesEntry = {
  encode(message: RuntimeEventPluginExecution_AttributesEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      Struct.encode(Struct.wrap(message.value), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RuntimeEventPluginExecution_AttributesEntry {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeEventPluginExecution_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeEventPluginExecution_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isObject(object.value) ? object.value : undefined,
    };
  },

  toJSON(message: RuntimeEventPluginExecution_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeEventPluginExecution_AttributesEntry>): RuntimeEventPluginExecution_AttributesEntry {
    return RuntimeEventPluginExecution_AttributesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<RuntimeEventPluginExecution_AttributesEntry>,
  ): RuntimeEventPluginExecution_AttributesEntry {
    const message = createBaseRuntimeEventPluginExecution_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? undefined;
    return message;
  },
};

function createBaseRuntimeEventsRequest(): RuntimeEventsRequest {
  return {};
}

export const RuntimeEventsRequest = {
  encode(_: RuntimeEventsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RuntimeEventsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RuntimeEventsRequest {
    return {};
  },

  toJSON(_: RuntimeEventsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RuntimeEventsRequest>): RuntimeEventsRequest {
    return RuntimeEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RuntimeEventsRequest>): RuntimeEventsRequest {
    const message = createBaseRuntimeEventsRequest();
    return message;
  },
};

function createBaseRuntimeEventsResponse(): RuntimeEventsResponse {
  return { pluginExecution: undefined };
}

export const RuntimeEventsResponse = {
  encode(message: RuntimeEventsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pluginExecution !== undefined) {
      RuntimeEventPluginExecution.encode(message.pluginExecution, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RuntimeEventsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRuntimeEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pluginExecution = RuntimeEventPluginExecution.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RuntimeEventsResponse {
    return {
      pluginExecution: isSet(object.pluginExecution)
        ? RuntimeEventPluginExecution.fromJSON(object.pluginExecution)
        : undefined,
    };
  },

  toJSON(message: RuntimeEventsResponse): unknown {
    const obj: any = {};
    if (message.pluginExecution !== undefined) {
      obj.pluginExecution = RuntimeEventPluginExecution.toJSON(message.pluginExecution);
    }
    return obj;
  },

  create(base?: DeepPartial<RuntimeEventsResponse>): RuntimeEventsResponse {
    return RuntimeEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RuntimeEventsResponse>): RuntimeEventsResponse {
    const message = createBaseRuntimeEventsResponse();
    message.pluginExecution = (object.pluginExecution !== undefined && object.pluginExecution !== null)
      ? RuntimeEventPluginExecution.fromPartial(object.pluginExecution)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
