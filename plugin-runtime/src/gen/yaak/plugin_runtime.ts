// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: yaak/plugin_runtime.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { RuntimeEventsRequest, RuntimeEventsResponse } from "./internal/runtime_events";
import {
  CallDataFiltererRequest,
  CallDataFiltererResponse,
  GetDataFilterersRequest,
  GetDataFilterersResponse,
} from "./plugins/data_filterer";
import {
  CallFileImportRequest,
  CallFileImportResponse,
  GetFileImportersRequest,
  GetFileImportersResponse,
} from "./plugins/file_importer";
import {
  CallHttpRequestActionRequest,
  CallHttpRequestActionResponse,
  GetHttpRequestActionsRequest,
  GetHttpRequestActionsResponse,
} from "./plugins/http_request_action";

export const protobufPackage = "yaak.plugins";

/** Runtime Event */
export type PluginRuntimeDefinition = typeof PluginRuntimeDefinition;
export const PluginRuntimeDefinition = {
  name: "PluginRuntime",
  fullName: "yaak.plugins.PluginRuntime",
  methods: {
    streamRuntimeEvents: {
      name: "StreamRuntimeEvents",
      requestType: RuntimeEventsRequest,
      requestStream: false,
      responseType: RuntimeEventsResponse,
      responseStream: true,
      options: {},
    },
    getFileImporters: {
      name: "GetFileImporters",
      requestType: GetFileImportersRequest,
      requestStream: false,
      responseType: GetFileImportersResponse,
      responseStream: false,
      options: {},
    },
    callFileImport: {
      name: "CallFileImport",
      requestType: CallFileImportRequest,
      requestStream: false,
      responseType: CallFileImportResponse,
      responseStream: false,
      options: {},
    },
    getDataFilters: {
      name: "GetDataFilters",
      requestType: GetDataFilterersRequest,
      requestStream: false,
      responseType: GetDataFilterersResponse,
      responseStream: false,
      options: {},
    },
    callDataFilter: {
      name: "CallDataFilter",
      requestType: CallDataFiltererRequest,
      requestStream: false,
      responseType: CallDataFiltererResponse,
      responseStream: false,
      options: {},
    },
    getHttpRequestActions: {
      name: "GetHttpRequestActions",
      requestType: GetHttpRequestActionsRequest,
      requestStream: false,
      responseType: GetHttpRequestActionsResponse,
      responseStream: false,
      options: {},
    },
    callHttpRequestAction: {
      name: "CallHttpRequestAction",
      requestType: CallHttpRequestActionRequest,
      requestStream: false,
      responseType: CallHttpRequestActionResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface PluginRuntimeServiceImplementation<CallContextExt = {}> {
  streamRuntimeEvents(
    request: RuntimeEventsRequest,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<RuntimeEventsResponse>>;
  getFileImporters(
    request: GetFileImportersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetFileImportersResponse>>;
  callFileImport(
    request: CallFileImportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CallFileImportResponse>>;
  getDataFilters(
    request: GetDataFilterersRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetDataFilterersResponse>>;
  callDataFilter(
    request: CallDataFiltererRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CallDataFiltererResponse>>;
  getHttpRequestActions(
    request: GetHttpRequestActionsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetHttpRequestActionsResponse>>;
  callHttpRequestAction(
    request: CallHttpRequestActionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CallHttpRequestActionResponse>>;
}

export interface PluginRuntimeClient<CallOptionsExt = {}> {
  streamRuntimeEvents(
    request: DeepPartial<RuntimeEventsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<RuntimeEventsResponse>;
  getFileImporters(
    request: DeepPartial<GetFileImportersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetFileImportersResponse>;
  callFileImport(
    request: DeepPartial<CallFileImportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CallFileImportResponse>;
  getDataFilters(
    request: DeepPartial<GetDataFilterersRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetDataFilterersResponse>;
  callDataFilter(
    request: DeepPartial<CallDataFiltererRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CallDataFiltererResponse>;
  getHttpRequestActions(
    request: DeepPartial<GetHttpRequestActionsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetHttpRequestActionsResponse>;
  callHttpRequestAction(
    request: DeepPartial<CallHttpRequestActionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CallHttpRequestActionResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };
