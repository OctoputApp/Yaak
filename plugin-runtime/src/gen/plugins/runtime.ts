// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: plugins/runtime.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "yaak.plugins.runtime";

export interface PluginInfo {
  plugin: string;
}

export interface HookResponse {
  info: PluginInfo | undefined;
  data: string;
}

export interface HookImportRequest {
  data: string;
}

export interface HookResponseFilterRequest {
  filter: string;
  body: string;
  contentType: string;
}

export interface HookExportRequest {
  request: string;
}

export interface PluginEvent {
  name: string;
  replyId: string;
  payload: string;
}

function createBasePluginInfo(): PluginInfo {
  return { plugin: "" };
}

export const PluginInfo = {
  encode(message: PluginInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.plugin !== "") {
      writer.uint32(10).string(message.plugin);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PluginInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePluginInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.plugin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PluginInfo {
    return { plugin: isSet(object.plugin) ? globalThis.String(object.plugin) : "" };
  },

  toJSON(message: PluginInfo): unknown {
    const obj: any = {};
    if (message.plugin !== "") {
      obj.plugin = message.plugin;
    }
    return obj;
  },

  create(base?: DeepPartial<PluginInfo>): PluginInfo {
    return PluginInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PluginInfo>): PluginInfo {
    const message = createBasePluginInfo();
    message.plugin = object.plugin ?? "";
    return message;
  },
};

function createBaseHookResponse(): HookResponse {
  return { info: undefined, data: "" };
}

export const HookResponse = {
  encode(message: HookResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.info !== undefined) {
      PluginInfo.encode(message.info, writer.uint32(10).fork()).ldelim();
    }
    if (message.data !== "") {
      writer.uint32(18).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.info = PluginInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookResponse {
    return {
      info: isSet(object.info) ? PluginInfo.fromJSON(object.info) : undefined,
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: HookResponse): unknown {
    const obj: any = {};
    if (message.info !== undefined) {
      obj.info = PluginInfo.toJSON(message.info);
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<HookResponse>): HookResponse {
    return HookResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookResponse>): HookResponse {
    const message = createBaseHookResponse();
    message.info = (object.info !== undefined && object.info !== null)
      ? PluginInfo.fromPartial(object.info)
      : undefined;
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseHookImportRequest(): HookImportRequest {
  return { data: "" };
}

export const HookImportRequest = {
  encode(message: HookImportRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookImportRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookImportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookImportRequest {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: HookImportRequest): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<HookImportRequest>): HookImportRequest {
    return HookImportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookImportRequest>): HookImportRequest {
    const message = createBaseHookImportRequest();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseHookResponseFilterRequest(): HookResponseFilterRequest {
  return { filter: "", body: "", contentType: "" };
}

export const HookResponseFilterRequest = {
  encode(message: HookResponseFilterRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.body !== "") {
      writer.uint32(18).string(message.body);
    }
    if (message.contentType !== "") {
      writer.uint32(26).string(message.contentType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookResponseFilterRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookResponseFilterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.body = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contentType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookResponseFilterRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
    };
  },

  toJSON(message: HookResponseFilterRequest): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    return obj;
  },

  create(base?: DeepPartial<HookResponseFilterRequest>): HookResponseFilterRequest {
    return HookResponseFilterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookResponseFilterRequest>): HookResponseFilterRequest {
    const message = createBaseHookResponseFilterRequest();
    message.filter = object.filter ?? "";
    message.body = object.body ?? "";
    message.contentType = object.contentType ?? "";
    return message;
  },
};

function createBaseHookExportRequest(): HookExportRequest {
  return { request: "" };
}

export const HookExportRequest = {
  encode(message: HookExportRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.request !== "") {
      writer.uint32(10).string(message.request);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookExportRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookExportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.request = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookExportRequest {
    return { request: isSet(object.request) ? globalThis.String(object.request) : "" };
  },

  toJSON(message: HookExportRequest): unknown {
    const obj: any = {};
    if (message.request !== "") {
      obj.request = message.request;
    }
    return obj;
  },

  create(base?: DeepPartial<HookExportRequest>): HookExportRequest {
    return HookExportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookExportRequest>): HookExportRequest {
    const message = createBaseHookExportRequest();
    message.request = object.request ?? "";
    return message;
  },
};

function createBasePluginEvent(): PluginEvent {
  return { name: "", replyId: "", payload: "" };
}

export const PluginEvent = {
  encode(message: PluginEvent, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.replyId !== "") {
      writer.uint32(18).string(message.replyId);
    }
    if (message.payload !== "") {
      writer.uint32(26).string(message.payload);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PluginEvent {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePluginEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.replyId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.payload = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PluginEvent {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      replyId: isSet(object.replyId) ? globalThis.String(object.replyId) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
    };
  },

  toJSON(message: PluginEvent): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.replyId !== "") {
      obj.replyId = message.replyId;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    return obj;
  },

  create(base?: DeepPartial<PluginEvent>): PluginEvent {
    return PluginEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PluginEvent>): PluginEvent {
    const message = createBasePluginEvent();
    message.name = object.name ?? "";
    message.replyId = object.replyId ?? "";
    message.payload = object.payload ?? "";
    return message;
  },
};

export type PluginRuntimeDefinition = typeof PluginRuntimeDefinition;
export const PluginRuntimeDefinition = {
  name: "PluginRuntime",
  fullName: "yaak.plugins.runtime.PluginRuntime",
  methods: {
    eventStream: {
      name: "EventStream",
      requestType: PluginEvent,
      requestStream: true,
      responseType: PluginEvent,
      responseStream: true,
      options: {},
    },
  },
} as const;

export interface PluginRuntimeServiceImplementation<CallContextExt = {}> {
  eventStream(
    request: AsyncIterable<PluginEvent>,
    context: CallContext & CallContextExt,
  ): ServerStreamingMethodResult<DeepPartial<PluginEvent>>;
}

export interface PluginRuntimeClient<CallOptionsExt = {}> {
  eventStream(
    request: AsyncIterable<DeepPartial<PluginEvent>>,
    options?: CallOptions & CallOptionsExt,
  ): AsyncIterable<PluginEvent>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export type ServerStreamingMethodResult<Response> = { [Symbol.asyncIterator](): AsyncIterator<Response, void> };
