// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: plugins/runtime.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";
import Long = require("long");

export const protobufPackage = "yaak.plugins.runtime";

export interface PluginInfo {
  plugin: string;
}

export interface HookGenericResponse {
  info: PluginInfo | undefined;
  data: string;
}

export interface HookImportRequest {
  data: string;
}

export interface HookResponseFilterRequest {
  filter: string;
  body: string;
  contentType: string;
}

export interface HookExportRequest {
  request: string;
}

export interface HookHttpRequestActionRequest {
}

export interface Callback {
  id: number;
  plugin: string;
}

export interface RequestAction {
  key: string;
  label: string;
  onSelect: Callback | undefined;
}

export interface HookHttpRequestActionResponse {
  actions: RequestAction[];
}

export interface CallCallbackRequest {
  callback: Callback | undefined;
  data: string;
}

export interface CallCallbackResponse {
  info: PluginInfo | undefined;
  data: string;
}

function createBasePluginInfo(): PluginInfo {
  return { plugin: "" };
}

export const PluginInfo = {
  encode(message: PluginInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.plugin !== "") {
      writer.uint32(10).string(message.plugin);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PluginInfo {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePluginInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.plugin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PluginInfo {
    return { plugin: isSet(object.plugin) ? globalThis.String(object.plugin) : "" };
  },

  toJSON(message: PluginInfo): unknown {
    const obj: any = {};
    if (message.plugin !== "") {
      obj.plugin = message.plugin;
    }
    return obj;
  },

  create(base?: DeepPartial<PluginInfo>): PluginInfo {
    return PluginInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PluginInfo>): PluginInfo {
    const message = createBasePluginInfo();
    message.plugin = object.plugin ?? "";
    return message;
  },
};

function createBaseHookGenericResponse(): HookGenericResponse {
  return { info: undefined, data: "" };
}

export const HookGenericResponse = {
  encode(message: HookGenericResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.info !== undefined) {
      PluginInfo.encode(message.info, writer.uint32(10).fork()).ldelim();
    }
    if (message.data !== "") {
      writer.uint32(18).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookGenericResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookGenericResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.info = PluginInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookGenericResponse {
    return {
      info: isSet(object.info) ? PluginInfo.fromJSON(object.info) : undefined,
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: HookGenericResponse): unknown {
    const obj: any = {};
    if (message.info !== undefined) {
      obj.info = PluginInfo.toJSON(message.info);
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<HookGenericResponse>): HookGenericResponse {
    return HookGenericResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookGenericResponse>): HookGenericResponse {
    const message = createBaseHookGenericResponse();
    message.info = (object.info !== undefined && object.info !== null)
      ? PluginInfo.fromPartial(object.info)
      : undefined;
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseHookImportRequest(): HookImportRequest {
  return { data: "" };
}

export const HookImportRequest = {
  encode(message: HookImportRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookImportRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookImportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookImportRequest {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: HookImportRequest): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<HookImportRequest>): HookImportRequest {
    return HookImportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookImportRequest>): HookImportRequest {
    const message = createBaseHookImportRequest();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseHookResponseFilterRequest(): HookResponseFilterRequest {
  return { filter: "", body: "", contentType: "" };
}

export const HookResponseFilterRequest = {
  encode(message: HookResponseFilterRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.body !== "") {
      writer.uint32(18).string(message.body);
    }
    if (message.contentType !== "") {
      writer.uint32(26).string(message.contentType);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookResponseFilterRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookResponseFilterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.body = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.contentType = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookResponseFilterRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      contentType: isSet(object.contentType) ? globalThis.String(object.contentType) : "",
    };
  },

  toJSON(message: HookResponseFilterRequest): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.contentType !== "") {
      obj.contentType = message.contentType;
    }
    return obj;
  },

  create(base?: DeepPartial<HookResponseFilterRequest>): HookResponseFilterRequest {
    return HookResponseFilterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookResponseFilterRequest>): HookResponseFilterRequest {
    const message = createBaseHookResponseFilterRequest();
    message.filter = object.filter ?? "";
    message.body = object.body ?? "";
    message.contentType = object.contentType ?? "";
    return message;
  },
};

function createBaseHookExportRequest(): HookExportRequest {
  return { request: "" };
}

export const HookExportRequest = {
  encode(message: HookExportRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.request !== "") {
      writer.uint32(10).string(message.request);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookExportRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookExportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.request = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookExportRequest {
    return { request: isSet(object.request) ? globalThis.String(object.request) : "" };
  },

  toJSON(message: HookExportRequest): unknown {
    const obj: any = {};
    if (message.request !== "") {
      obj.request = message.request;
    }
    return obj;
  },

  create(base?: DeepPartial<HookExportRequest>): HookExportRequest {
    return HookExportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookExportRequest>): HookExportRequest {
    const message = createBaseHookExportRequest();
    message.request = object.request ?? "";
    return message;
  },
};

function createBaseHookHttpRequestActionRequest(): HookHttpRequestActionRequest {
  return {};
}

export const HookHttpRequestActionRequest = {
  encode(_: HookHttpRequestActionRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookHttpRequestActionRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookHttpRequestActionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): HookHttpRequestActionRequest {
    return {};
  },

  toJSON(_: HookHttpRequestActionRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<HookHttpRequestActionRequest>): HookHttpRequestActionRequest {
    return HookHttpRequestActionRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<HookHttpRequestActionRequest>): HookHttpRequestActionRequest {
    const message = createBaseHookHttpRequestActionRequest();
    return message;
  },
};

function createBaseCallback(): Callback {
  return { id: 0, plugin: "" };
}

export const Callback = {
  encode(message: Callback, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== 0) {
      writer.uint32(8).int64(message.id);
    }
    if (message.plugin !== "") {
      writer.uint32(18).string(message.plugin);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Callback {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallback();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.int64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.plugin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Callback {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      plugin: isSet(object.plugin) ? globalThis.String(object.plugin) : "",
    };
  },

  toJSON(message: Callback): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.plugin !== "") {
      obj.plugin = message.plugin;
    }
    return obj;
  },

  create(base?: DeepPartial<Callback>): Callback {
    return Callback.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Callback>): Callback {
    const message = createBaseCallback();
    message.id = object.id ?? 0;
    message.plugin = object.plugin ?? "";
    return message;
  },
};

function createBaseRequestAction(): RequestAction {
  return { key: "", label: "", onSelect: undefined };
}

export const RequestAction = {
  encode(message: RequestAction, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.label !== "") {
      writer.uint32(18).string(message.label);
    }
    if (message.onSelect !== undefined) {
      Callback.encode(message.onSelect, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RequestAction {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRequestAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.label = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.onSelect = Callback.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RequestAction {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      label: isSet(object.label) ? globalThis.String(object.label) : "",
      onSelect: isSet(object.onSelect) ? Callback.fromJSON(object.onSelect) : undefined,
    };
  },

  toJSON(message: RequestAction): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.label !== "") {
      obj.label = message.label;
    }
    if (message.onSelect !== undefined) {
      obj.onSelect = Callback.toJSON(message.onSelect);
    }
    return obj;
  },

  create(base?: DeepPartial<RequestAction>): RequestAction {
    return RequestAction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RequestAction>): RequestAction {
    const message = createBaseRequestAction();
    message.key = object.key ?? "";
    message.label = object.label ?? "";
    message.onSelect = (object.onSelect !== undefined && object.onSelect !== null)
      ? Callback.fromPartial(object.onSelect)
      : undefined;
    return message;
  },
};

function createBaseHookHttpRequestActionResponse(): HookHttpRequestActionResponse {
  return { actions: [] };
}

export const HookHttpRequestActionResponse = {
  encode(message: HookHttpRequestActionResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.actions) {
      RequestAction.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookHttpRequestActionResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookHttpRequestActionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          if (tag !== 18) {
            break;
          }

          message.actions.push(RequestAction.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookHttpRequestActionResponse {
    return {
      actions: globalThis.Array.isArray(object?.actions)
        ? object.actions.map((e: any) => RequestAction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: HookHttpRequestActionResponse): unknown {
    const obj: any = {};
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => RequestAction.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<HookHttpRequestActionResponse>): HookHttpRequestActionResponse {
    return HookHttpRequestActionResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookHttpRequestActionResponse>): HookHttpRequestActionResponse {
    const message = createBaseHookHttpRequestActionResponse();
    message.actions = object.actions?.map((e) => RequestAction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCallCallbackRequest(): CallCallbackRequest {
  return { callback: undefined, data: "" };
}

export const CallCallbackRequest = {
  encode(message: CallCallbackRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.callback !== undefined) {
      Callback.encode(message.callback, writer.uint32(10).fork()).ldelim();
    }
    if (message.data !== "") {
      writer.uint32(18).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallCallbackRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallCallbackRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.callback = Callback.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallCallbackRequest {
    return {
      callback: isSet(object.callback) ? Callback.fromJSON(object.callback) : undefined,
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: CallCallbackRequest): unknown {
    const obj: any = {};
    if (message.callback !== undefined) {
      obj.callback = Callback.toJSON(message.callback);
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<CallCallbackRequest>): CallCallbackRequest {
    return CallCallbackRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallCallbackRequest>): CallCallbackRequest {
    const message = createBaseCallCallbackRequest();
    message.callback = (object.callback !== undefined && object.callback !== null)
      ? Callback.fromPartial(object.callback)
      : undefined;
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseCallCallbackResponse(): CallCallbackResponse {
  return { info: undefined, data: "" };
}

export const CallCallbackResponse = {
  encode(message: CallCallbackResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.info !== undefined) {
      PluginInfo.encode(message.info, writer.uint32(10).fork()).ldelim();
    }
    if (message.data !== "") {
      writer.uint32(18).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CallCallbackResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallCallbackResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.info = PluginInfo.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallCallbackResponse {
    return {
      info: isSet(object.info) ? PluginInfo.fromJSON(object.info) : undefined,
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: CallCallbackResponse): unknown {
    const obj: any = {};
    if (message.info !== undefined) {
      obj.info = PluginInfo.toJSON(message.info);
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<CallCallbackResponse>): CallCallbackResponse {
    return CallCallbackResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallCallbackResponse>): CallCallbackResponse {
    const message = createBaseCallCallbackResponse();
    message.info = (object.info !== undefined && object.info !== null)
      ? PluginInfo.fromPartial(object.info)
      : undefined;
    message.data = object.data ?? "";
    return message;
  },
};

export type PluginRuntimeDefinition = typeof PluginRuntimeDefinition;
export const PluginRuntimeDefinition = {
  name: "PluginRuntime",
  fullName: "yaak.plugins.runtime.PluginRuntime",
  methods: {
    hookImport: {
      name: "hookImport",
      requestType: HookImportRequest,
      requestStream: false,
      responseType: HookGenericResponse,
      responseStream: false,
      options: {},
    },
    hookExport: {
      name: "hookExport",
      requestType: HookExportRequest,
      requestStream: false,
      responseType: HookGenericResponse,
      responseStream: false,
      options: {},
    },
    hookResponseFilter: {
      name: "hookResponseFilter",
      requestType: HookResponseFilterRequest,
      requestStream: false,
      responseType: HookGenericResponse,
      responseStream: false,
      options: {},
    },
    hookHttpRequestAction: {
      name: "hookHttpRequestAction",
      requestType: HookHttpRequestActionRequest,
      requestStream: false,
      responseType: HookHttpRequestActionResponse,
      responseStream: false,
      options: {},
    },
    callCallback: {
      name: "callCallback",
      requestType: CallCallbackRequest,
      requestStream: false,
      responseType: CallCallbackResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface PluginRuntimeServiceImplementation<CallContextExt = {}> {
  hookImport(
    request: HookImportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HookGenericResponse>>;
  hookExport(
    request: HookExportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HookGenericResponse>>;
  hookResponseFilter(
    request: HookResponseFilterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HookGenericResponse>>;
  hookHttpRequestAction(
    request: HookHttpRequestActionRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HookHttpRequestActionResponse>>;
  callCallback(
    request: CallCallbackRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CallCallbackResponse>>;
}

export interface PluginRuntimeClient<CallOptionsExt = {}> {
  hookImport(
    request: DeepPartial<HookImportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HookGenericResponse>;
  hookExport(
    request: DeepPartial<HookExportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HookGenericResponse>;
  hookResponseFilter(
    request: DeepPartial<HookResponseFilterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HookGenericResponse>;
  hookHttpRequestAction(
    request: DeepPartial<HookHttpRequestActionRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HookHttpRequestActionResponse>;
  callCallback(
    request: DeepPartial<CallCallbackRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CallCallbackResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(long: Long): number {
  if (long.gt(globalThis.Number.MAX_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (long.lt(globalThis.Number.MIN_SAFE_INTEGER)) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
