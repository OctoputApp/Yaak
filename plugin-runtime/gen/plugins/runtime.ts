// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: plugins/runtime.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "yaak.plugins.runtime";

export interface HookImportRequest {
  data: string;
}

export interface HookImportResponse {
  data: string;
}

export interface HookFilterRequest {
  filter: string;
  body: string;
}

export interface HookFilterResponse {
  data: string;
}

function createBaseHookImportRequest(): HookImportRequest {
  return { data: "" };
}

export const HookImportRequest = {
  encode(message: HookImportRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookImportRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookImportRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookImportRequest {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: HookImportRequest): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<HookImportRequest>): HookImportRequest {
    return HookImportRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookImportRequest>): HookImportRequest {
    const message = createBaseHookImportRequest();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseHookImportResponse(): HookImportResponse {
  return { data: "" };
}

export const HookImportResponse = {
  encode(message: HookImportResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookImportResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookImportResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookImportResponse {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: HookImportResponse): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<HookImportResponse>): HookImportResponse {
    return HookImportResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookImportResponse>): HookImportResponse {
    const message = createBaseHookImportResponse();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseHookFilterRequest(): HookFilterRequest {
  return { filter: "", body: "" };
}

export const HookFilterRequest = {
  encode(message: HookFilterRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.filter !== "") {
      writer.uint32(10).string(message.filter);
    }
    if (message.body !== "") {
      writer.uint32(18).string(message.body);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookFilterRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookFilterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.body = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookFilterRequest {
    return {
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
    };
  },

  toJSON(message: HookFilterRequest): unknown {
    const obj: any = {};
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    return obj;
  },

  create(base?: DeepPartial<HookFilterRequest>): HookFilterRequest {
    return HookFilterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookFilterRequest>): HookFilterRequest {
    const message = createBaseHookFilterRequest();
    message.filter = object.filter ?? "";
    message.body = object.body ?? "";
    return message;
  },
};

function createBaseHookFilterResponse(): HookFilterResponse {
  return { data: "" };
}

export const HookFilterResponse = {
  encode(message: HookFilterResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookFilterResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookFilterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookFilterResponse {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: HookFilterResponse): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<HookFilterResponse>): HookFilterResponse {
    return HookFilterResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookFilterResponse>): HookFilterResponse {
    const message = createBaseHookFilterResponse();
    message.data = object.data ?? "";
    return message;
  },
};

export type PluginRuntimeDefinition = typeof PluginRuntimeDefinition;
export const PluginRuntimeDefinition = {
  name: "PluginRuntime",
  fullName: "yaak.plugins.runtime.PluginRuntime",
  methods: {
    hookImport: {
      name: "hookImport",
      requestType: HookImportRequest,
      requestStream: false,
      responseType: HookImportResponse,
      responseStream: false,
      options: {},
    },
    hookFilter: {
      name: "hookFilter",
      requestType: HookFilterRequest,
      requestStream: false,
      responseType: HookFilterResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface PluginRuntimeServiceImplementation<CallContextExt = {}> {
  hookImport(
    request: HookImportRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HookImportResponse>>;
  hookFilter(
    request: HookFilterRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<HookFilterResponse>>;
}

export interface PluginRuntimeClient<CallOptionsExt = {}> {
  hookImport(
    request: DeepPartial<HookImportRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HookImportResponse>;
  hookFilter(
    request: DeepPartial<HookFilterRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<HookFilterResponse>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
