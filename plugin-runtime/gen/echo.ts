// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.180.0
//   protoc               v3.19.1
// source: echo.proto

/* eslint-disable */
import { type CallContext, type CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "echo";

export interface EchoReq {
  name: string;
}

export interface EchoRes {
  message: string;
}

export interface HookImportReq {
  data: string;
}

export interface HookImportRes {
  data: string;
}

function createBaseEchoReq(): EchoReq {
  return { name: "" };
}

export const EchoReq = {
  encode(message: EchoReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EchoReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEchoReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EchoReq {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: EchoReq): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<EchoReq>): EchoReq {
    return EchoReq.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EchoReq>): EchoReq {
    const message = createBaseEchoReq();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseEchoRes(): EchoRes {
  return { message: "" };
}

export const EchoRes = {
  encode(message: EchoRes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): EchoRes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEchoRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EchoRes {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: EchoRes): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<EchoRes>): EchoRes {
    return EchoRes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EchoRes>): EchoRes {
    const message = createBaseEchoRes();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseHookImportReq(): HookImportReq {
  return { data: "" };
}

export const HookImportReq = {
  encode(message: HookImportReq, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookImportReq {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookImportReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookImportReq {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: HookImportReq): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<HookImportReq>): HookImportReq {
    return HookImportReq.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookImportReq>): HookImportReq {
    const message = createBaseHookImportReq();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseHookImportRes(): HookImportRes {
  return { data: "" };
}

export const HookImportRes = {
  encode(message: HookImportRes, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): HookImportRes {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseHookImportRes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): HookImportRes {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: HookImportRes): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<HookImportRes>): HookImportRes {
    return HookImportRes.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<HookImportRes>): HookImportRes {
    const message = createBaseHookImportRes();
    message.data = object.data ?? "";
    return message;
  },
};

export type EchoDefinition = typeof EchoDefinition;
export const EchoDefinition = {
  name: "Echo",
  fullName: "echo.Echo",
  methods: {
    echo: {
      name: "echo",
      requestType: EchoReq,
      requestStream: false,
      responseType: EchoRes,
      responseStream: false,
      options: {},
    },
    hookImport: {
      name: "hookImport",
      requestType: HookImportReq,
      requestStream: false,
      responseType: HookImportRes,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface EchoServiceImplementation<CallContextExt = {}> {
  echo(request: EchoReq, context: CallContext & CallContextExt): Promise<DeepPartial<EchoRes>>;
  hookImport(request: HookImportReq, context: CallContext & CallContextExt): Promise<DeepPartial<HookImportRes>>;
}

export interface EchoClient<CallOptionsExt = {}> {
  echo(request: DeepPartial<EchoReq>, options?: CallOptions & CallOptionsExt): Promise<EchoRes>;
  hookImport(request: DeepPartial<HookImportReq>, options?: CallOptions & CallOptionsExt): Promise<HookImportRes>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
